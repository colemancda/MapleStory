//
//  LoginTests.swift
//  
//
//  Created by Alsey Coleman Miller on 12/21/22.
//

import Foundation
import XCTest
@testable import MapleStory
@testable import MapleStory62

final class LoginTests: XCTestCase {
    
    func testHello() throws {
        
        let packet = Data([0x0D, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x46, 0x72, 0x7A, 0x18, 0x52, 0x30, 0x78, 0x14, 0x08])
        
        let value = HelloPacket(
            recieveNonce: 0x46727A18,
            sendNonce: 0x52307814,
            region: .global
        )
        
        XCTAssertEqual(value.version, .v62)
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testPing() throws {
        
        let encryptedData = Data([0x48, 0x7D, 0x4A, 0x7D, 0x01, 0x5C])
        let encryptedParameters = Data([0x01, 0x5C])
        let packetData = Data([0x11, 0x00])
        let nonce: Nonce = 0x27568982
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = PingPacket()
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data.suffix(2), encryptedParameters)
        XCTAssertEqual(encrypted.parametersSize, 2)
        XCTAssertEqual(encrypted.parameters, encryptedParameters)
        XCTAssertEqual(encrypted.header, UInt32(bigEndian: 0x487D4A7D))
        XCTAssertEqual(encrypted.data, encryptedData)
        
        let decrypted: Packet<ServerOpcode> = try encrypted.decrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(decrypted, packet)
    }
    
    func testPong() throws {
        
        let encryptedData = Data([0x05, 0x28])
        let packetData = Data([0x18, 0x00])
        let nonce: Nonce = 0x56CFECDD
                
        let packet = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(packet.data, packetData)
        
        let value = PongPacket()
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testClientError() throws {
        
        let packet: Packet<ClientOpcode> = [0x19, 0x00, 0x5D, 0x0C, 0x76, 0x65, 0x72, 0x2E, 0x36, 0x32, 0x20, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4E, 0x61, 0x6D, 0x65, 0x28, 0x29, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x49, 0x44, 0x28, 0x2D, 0x31, 0x29, 0x2C, 0x20, 0x43, 0x68, 0x49, 0x44, 0x28, 0x2D, 0x31, 0x29, 0x0D, 0x0A, 0x3D, 0x3D, 0x3D, 0x3D, 0x20, 0x32, 0x30, 0x32, 0x34, 0x2F, 0x35, 0x2F, 0x34, 0x20, 0x30, 0x37, 0x3A, 0x32, 0x33, 0x3A, 0x30, 0x36, 0x2E, 0x35, 0x39, 0x37, 0x20, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x0D, 0x0A, 0x50, 0x49, 0x44, 0x28, 0x41, 0x46, 0x38, 0x29, 0x2C, 0x20, 0x54, 0x49, 0x44, 0x28, 0x42, 0x37, 0x43, 0x29, 0x0D, 0x0A, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x43, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5F, 0x56, 0x49, 0x4F, 0x4C, 0x41, 0x54, 0x49, 0x4F, 0x4E, 0x0D, 0x0A, 0x46, 0x61, 0x75, 0x6C, 0x74, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3A, 0x20, 0x20, 0x37, 0x30, 0x38, 0x42, 0x35, 0x32, 0x39, 0x33, 0x20, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x39, 0x33, 0x0D, 0x0A, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x3A, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x57, 0x49, 0x4E, 0x4D, 0x4D, 0x42, 0x41, 0x53, 0x45, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x0D, 0x0A, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3A, 0x0D, 0x0A, 0x45, 0x41, 0x58, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x45, 0x42, 0x58, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x45, 0x43, 0x58, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x0D, 0x0A, 0x45, 0x44, 0x58, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x45, 0x53, 0x49, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x45, 0x44, 0x49, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x43, 0x53, 0x3A, 0x45, 0x49, 0x50, 0x3A, 0x30, 0x30, 0x31, 0x42, 0x3A, 0x37, 0x30, 0x38, 0x42, 0x35, 0x32, 0x39, 0x33, 0x0D, 0x0A, 0x53, 0x53, 0x3A, 0x45, 0x53, 0x50, 0x3A, 0x30, 0x30, 0x32, 0x33, 0x3A, 0x30, 0x30, 0x31, 0x39, 0x45, 0x32, 0x34, 0x30, 0x20, 0x20, 0x45, 0x42, 0x50, 0x3A, 0x30, 0x30, 0x31, 0x39, 0x45, 0x32, 0x35, 0x43, 0x0D, 0x0A, 0x44, 0x53, 0x3A, 0x30, 0x30, 0x32, 0x33, 0x20, 0x20, 0x45, 0x53, 0x3A, 0x30, 0x30, 0x32, 0x33, 0x20, 0x20, 0x46, 0x53, 0x3A, 0x30, 0x30, 0x33, 0x42, 0x20, 0x20, 0x47, 0x53, 0x3A, 0x30, 0x30, 0x32, 0x33, 0x0D, 0x0A, 0x46, 0x6C, 0x61, 0x67, 0x73, 0x3A, 0x30, 0x30, 0x32, 0x31, 0x30, 0x32, 0x30, 0x32, 0x0D, 0x0A, 0x44, 0x42, 0x47, 0x48, 0x45, 0x4C, 0x50, 0x2E, 0x44, 0x4C, 0x4C, 0x20, 0x6F, 0x72, 0x20, 0x69, 0x74, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x6F, 0x75, 0x6E, 0x64, 0x0D, 0x0A, 0x0D, 0x0A, 0x43, 0x61, 0x6C, 0x6C, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x3A, 0x0D, 0x0A, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x20, 0x20, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4C, 0x6F, 0x67, 0x69, 0x63, 0x61, 0x6C, 0x20, 0x61, 0x64, 0x64, 0x72, 0x20, 0x20, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x0D, 0x0A, 0x37, 0x30, 0x38, 0x42, 0x35, 0x32, 0x39, 0x33, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x32, 0x35, 0x43, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x39, 0x33, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x57, 0x49, 0x4E, 0x4D, 0x4D, 0x42, 0x41, 0x53, 0x45, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x30, 0x38, 0x42, 0x35, 0x30, 0x44, 0x37, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x33, 0x38, 0x38, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x44, 0x37, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x57, 0x49, 0x4E, 0x4D, 0x4D, 0x42, 0x41, 0x53, 0x45, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x30, 0x38, 0x42, 0x35, 0x30, 0x33, 0x37, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x33, 0x39, 0x43, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x33, 0x37, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x57, 0x49, 0x4E, 0x4D, 0x4D, 0x42, 0x41, 0x53, 0x45, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x32, 0x44, 0x43, 0x33, 0x44, 0x32, 0x41, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x35, 0x38, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x32, 0x44, 0x32, 0x41, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x4D, 0x53, 0x41, 0x43, 0x4D, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x32, 0x44, 0x43, 0x36, 0x39, 0x38, 0x33, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x35, 0x39, 0x43, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x35, 0x39, 0x38, 0x33, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x4D, 0x53, 0x41, 0x43, 0x4D, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x32, 0x44, 0x43, 0x34, 0x39, 0x36, 0x46, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x35, 0x43, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x33, 0x39, 0x36, 0x46, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x4D, 0x53, 0x41, 0x43, 0x4D, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x32, 0x44, 0x43, 0x41, 0x37, 0x41, 0x43, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x35, 0x46, 0x34, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x39, 0x37, 0x41, 0x43, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x4D, 0x53, 0x41, 0x43, 0x4D, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x37, 0x32, 0x44, 0x43, 0x42, 0x35, 0x39, 0x36, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x36, 0x44, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x41, 0x35, 0x39, 0x36, 0x20, 0x43, 0x3A, 0x5C, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x5C, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x33, 0x32, 0x5C, 0x4D, 0x53, 0x41, 0x43, 0x4D, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x0D, 0x0A, 0x35, 0x31, 0x38, 0x30, 0x34, 0x37, 0x33, 0x44, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x37, 0x32, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x33, 0x37, 0x33, 0x44, 0x20, 0x43, 0x3A, 0x5C, 0x47, 0x61, 0x6D, 0x65, 0x73, 0x5C, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x36, 0x32, 0x5C, 0x53, 0x4F, 0x55, 0x4E, 0x44, 0x5F, 0x44, 0x58, 0x38, 0x2E, 0x44, 0x4C, 0x4C, 0x0D, 0x0A, 0x35, 0x31, 0x38, 0x30, 0x41, 0x42, 0x44, 0x39, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x37, 0x46, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x39, 0x42, 0x44, 0x39, 0x20, 0x43, 0x3A, 0x5C, 0x47, 0x61, 0x6D, 0x65, 0x73, 0x5C, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x36, 0x32, 0x5C, 0x53, 0x4F, 0x55, 0x4E, 0x44, 0x5F, 0x44, 0x58, 0x38, 0x2E, 0x44, 0x4C, 0x4C, 0x0D, 0x0A, 0x35, 0x31, 0x38, 0x30, 0x42, 0x42, 0x38, 0x44, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x38, 0x36, 0x38, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x41, 0x42, 0x38, 0x44, 0x20, 0x43, 0x3A, 0x5C, 0x47, 0x61, 0x6D, 0x65, 0x73, 0x5C, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x36, 0x32, 0x5C, 0x53, 0x4F, 0x55, 0x4E, 0x44, 0x5F, 0x44, 0x58, 0x38, 0x2E, 0x44, 0x4C, 0x4C, 0x0D, 0x0A, 0x35, 0x31, 0x38, 0x30, 0x37, 0x41, 0x33, 0x35, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x38, 0x43, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x30, 0x36, 0x41, 0x33, 0x35, 0x20, 0x43, 0x3A, 0x5C, 0x47, 0x61, 0x6D, 0x65, 0x73, 0x5C, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x36, 0x32, 0x5C, 0x53, 0x4F, 0x55, 0x4E, 0x44, 0x5F, 0x44, 0x58, 0x38, 0x2E, 0x44, 0x4C, 0x4C, 0x0D, 0x0A, 0x30, 0x30, 0x34, 0x33, 0x34, 0x30, 0x31, 0x35, 0x20, 0x20, 0x30, 0x30, 0x31, 0x39, 0x45, 0x39, 0x30, 0x30, 0x20, 0x20, 0x30, 0x30, 0x30, 0x31, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x33, 0x30, 0x31, 0x35, 0x20, 0x43, 0x3A, 0x5C, 0x47, 0x61, 0x6D, 0x65, 0x73, 0x5C, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x53, 0x74, 0x6F, 0x72, 0x79, 0x36, 0x32, 0x5C, 0x47, 0x4D, 0x53, 0x7F, 0x42, 0xD1, 0x68, 0x6F, 0x10, 0x28, 0x70, 0x0E, 0x00, 0x3E, 0xD1, 0x00, 0xE1, 0x2D, 0x87, 0xA2, 0xC1, 0x48, 0x91, 0xA1, 0xD0, 0x6E, 0x66, 0xC1, 0x18, 0x17, 0x25, 0xD9, 0xB0, 0x5A, 0x78, 0xC3, 0x7D, 0x06, 0x90, 0x69, 0x62, 0xF3, 0xED, 0x78, 0x47, 0x31, 0x7C, 0x0B, 0x1D, 0xBE, 0xC7, 0xDF, 0x52, 0x06, 0xA6, 0x07, 0x14, 0x84, 0xE7, 0x90, 0x34, 0x1F, 0xC5, 0x61, 0xBA, 0x43, 0xDF, 0x4C, 0x9D, 0x25, 0x02, 0xB2, 0x66, 0x87, 0xD0, 0xF3, 0x89, 0x67, 0x8B, 0x91, 0x0B, 0x63, 0x83, 0x9B, 0x43, 0x44, 0x21, 0x9C, 0x8D, 0x61, 0x19, 0x87, 0x63, 0x0D, 0x34, 0x27, 0xC5, 0x2D, 0xD7, 0xCA, 0xFD, 0x43, 0xAF, 0xAA, 0x6C, 0x40, 0xAD, 0xED, 0xB7, 0x5F, 0x5D, 0x10, 0x9C, 0xBC, 0xF3, 0xFE, 0xD7, 0x66, 0x22, 0xF1, 0x7A, 0xA0, 0x5A, 0x4B, 0xD9, 0x1A, 0x72, 0x9C, 0x72, 0xAD, 0x35, 0x12, 0x0E, 0xF1, 0xA8, 0x6E, 0xCD, 0xC5, 0x26, 0xCB, 0x50, 0x5E, 0x9E, 0x54, 0xCF, 0x91, 0x62, 0x27, 0x6E, 0xE5, 0xC7, 0x44, 0xCF, 0xA3, 0x1E, 0x5A, 0x10, 0x25, 0x89, 0x32, 0xD3, 0x93, 0xE2, 0x72, 0x5B, 0x61, 0xA2, 0xD5, 0x89, 0xDC, 0xCC, 0x1B, 0xB2, 0xC9, 0x04, 0x11, 0xE6, 0x2F, 0x82, 0x02, 0xB8, 0x5B, 0x01, 0xB5, 0x81, 0x3D, 0x27, 0xC7, 0x35, 0x5B, 0x88, 0xC6, 0x21, 0xFF, 0x88, 0x0B, 0x00, 0xCD, 0xE2, 0x0C, 0x60, 0xEC, 0x38, 0xE6, 0x37, 0x77, 0xF5, 0xCF, 0x64, 0x1E, 0x54, 0x88, 0x0B, 0xD8, 0x35, 0x24, 0x6F, 0xE6, 0xF7, 0x82, 0x96, 0x19, 0x69, 0x6A, 0xFF, 0x2E, 0xBF, 0x2D, 0xE1, 0x92, 0x4B, 0x74, 0xC3, 0x23, 0x0E, 0xCB, 0x4C, 0xDD, 0x46, 0x27, 0x04, 0x8F, 0x72, 0xF0, 0x45, 0x78, 0x97, 0xF8, 0x67, 0x16, 0x3B, 0xBE, 0x01, 0x3C, 0x60, 0xB2, 0xDA, 0xC1, 0x3D, 0x21, 0xD5, 0x6D, 0xED, 0xF3, 0x29, 0x7F, 0x6F, 0xA5, 0x6A, 0xE3, 0x1B, 0x55, 0xCC, 0xF3, 0xBD, 0x78, 0x7F, 0x9C, 0x31, 0x9D, 0xE6, 0x2D, 0x19, 0x3F, 0x6D, 0x40, 0xEE, 0xF1, 0xCB, 0x01, 0xE5, 0x2B, 0xF1, 0x60, 0x7A, 0x48, 0x03, 0xC2, 0xA6, 0x63, 0x8E, 0xDA, 0x26, 0x1E, 0x84, 0xAA, 0x99, 0x24, 0xFB, 0xE4, 0xF0, 0xAF, 0x68, 0xC7, 0x2A, 0x2D, 0x65, 0x12, 0xAE, 0x50, 0x7C, 0x59, 0x29, 0x7A, 0x97, 0xA6, 0x1D, 0x2F, 0xBC, 0xE8, 0x5B, 0x03, 0x36, 0x1B, 0x4D, 0x18, 0xA6, 0xA3, 0x80, 0x9B, 0x24, 0xED, 0x57, 0xB1, 0x51, 0x26, 0x8A, 0x86, 0x29, 0xF9, 0x7E, 0x10, 0xF0, 0x01, 0xB5, 0x51, 0xA5, 0x9B, 0x39, 0x2B, 0x2A, 0x0F, 0x4A, 0x00, 0x51, 0x47, 0x44, 0x70, 0x75, 0x55, 0x45, 0x8B, 0xD3, 0x0E, 0x93, 0xFA, 0x95, 0x0A, 0x67, 0x5D, 0x97, 0x76, 0x04, 0xEF, 0x24, 0xB5, 0x6E, 0x4A, 0x6B, 0x28, 0x02, 0x49, 0x07, 0x3F, 0xB5, 0x87, 0x1E, 0xA0, 0x61, 0x5B, 0x3C, 0xA4, 0xB8, 0xDC, 0xE4, 0xD0, 0x7F, 0xB5, 0x2E, 0x5B, 0x64, 0x46, 0x01, 0x47, 0xEB, 0x7D, 0xE7, 0x86, 0x3F, 0x6B, 0xE9, 0xA7, 0xE9, 0x09, 0x96, 0x39, 0x6A, 0x78, 0xBD, 0x37, 0x6A, 0x7C, 0x7C, 0x12, 0xCE, 0x94, 0xB9, 0xBF, 0x43, 0x46, 0x73, 0xD6, 0x6D, 0x9E, 0x5B, 0xBB, 0xA0, 0xE8, 0xA1, 0x2E, 0xD3, 0x07, 0x14, 0xCC, 0xB7, 0x2B, 0xB2, 0x16, 0x3B, 0x51, 0x40, 0xC3, 0x9A, 0x7E, 0x98, 0x3D, 0xFC, 0x02, 0x74, 0x52, 0xAB, 0xAF, 0x98, 0xAF, 0xCB, 0xA5, 0x90, 0x09, 0xF6, 0xF8, 0xF4, 0x7D, 0xD8, 0x14, 0x8D, 0xD8, 0xA2, 0x9D, 0x82, 0xA3, 0x71, 0x72, 0xC7, 0x82, 0xC0, 0x88, 0xA6, 0xE7, 0xC7, 0xD9, 0xEB, 0x20, 0x9C, 0xD3, 0xA8, 0x06, 0x89, 0x99, 0x2F, 0x76, 0xE3, 0xD9, 0xDB, 0xC1, 0x8A, 0x7F, 0xAB, 0x09, 0xE5, 0xC6, 0x79, 0xBD, 0x99, 0x3C, 0xBE, 0x39, 0x36, 0x74, 0xE5, 0x61, 0xAB, 0x46, 0x8D, 0x75, 0x2D, 0xE0, 0x40, 0x5A, 0xFB, 0xFF, 0x86, 0xD1, 0xD1, 0xE9, 0xA1, 0xC9, 0xD2, 0x9F, 0x0D, 0x37, 0xC3, 0x6B, 0x07, 0x6F, 0xD7, 0xCE, 0x7E, 0xF5, 0x01, 0x69, 0xAA, 0xC2, 0xC5, 0x58, 0xC6, 0x10, 0x6B, 0x72, 0x97, 0x4C, 0x2E, 0xB4, 0x53, 0x80, 0xED, 0xB0, 0xFA, 0x55, 0x91, 0x51, 0x2B, 0x94, 0x55, 0xF6, 0x56, 0x34, 0x25, 0x8E, 0x05, 0x32, 0x69, 0x82, 0x3E, 0x5B, 0xC5, 0x75, 0x44, 0x4E, 0xFA, 0x36, 0xD7, 0xC1, 0x9D, 0xB4, 0xE9, 0x40, 0x0D, 0xD9, 0xCD, 0x6F, 0x9B, 0x97, 0x0D, 0x32, 0x4D, 0x61, 0x26, 0x06, 0x0E, 0xB4, 0x10, 0x28, 0xDF, 0xE6, 0x98, 0x98, 0xE9, 0xF7, 0xBC, 0x87, 0x85, 0xA5, 0x27, 0x0B, 0x0A, 0xE4, 0x15, 0x83, 0xBD, 0xA0, 0x75, 0xE2, 0x29, 0x26, 0x8D, 0xCA, 0x33, 0xD1, 0x5C, 0xBA, 0x34, 0x1E, 0xE8, 0x07, 0x89, 0xAD, 0x15, 0x1C, 0x5F, 0x7C, 0x3C, 0x2C, 0xD7, 0xD0, 0x94, 0x61, 0x3F, 0xA0, 0x15, 0x0F, 0xA9, 0x5E, 0xF1, 0x75, 0x08, 0x39, 0x51, 0x00, 0xA2, 0x22, 0x3C, 0x65, 0xEE, 0xCD, 0x56, 0xF7, 0x7A, 0x69, 0x1D, 0x3C, 0x06, 0x7B, 0x7B, 0xBA, 0xE3, 0xC5, 0xEC, 0x1B, 0x29, 0x48, 0x39, 0x77, 0x16, 0x9E, 0x82, 0xFA, 0x4F, 0x0D, 0x83, 0x6F, 0x7D, 0x54, 0x51, 0xD9, 0xD1, 0x07, 0xE6, 0x15, 0x4B, 0x3C, 0x1E, 0xF2, 0x07, 0xF1, 0x60, 0x95, 0xBE, 0x46, 0x9A, 0x64, 0x7E, 0x1E, 0xCB, 0x55, 0x44, 0x0F, 0x9F, 0x10, 0xCA, 0x8E, 0xD1, 0x30, 0x5F, 0x1E, 0x3C, 0x56, 0xB8, 0x6A, 0xC8, 0x32, 0x94, 0xD4, 0x54, 0x8F, 0x5D, 0x79, 0xC4, 0xC2, 0xF1, 0xEA, 0x18, 0xC7, 0xDB, 0x98, 0x54, 0xEA, 0x27, 0x57, 0x0C, 0x4A, 0x23, 0x0C, 0xB5, 0xAC, 0xFD, 0x38, 0x5F, 0xD6, 0x37, 0xF3, 0x26, 0xC6, 0x3D, 0xCC, 0x85, 0xEC, 0x7E, 0x53, 0x73, 0x83, 0x25, 0x5B, 0x3E, 0x98, 0xC3, 0xD4, 0x8D, 0xA4, 0xF9, 0x90, 0x7C, 0x45, 0xCF, 0x26, 0x59, 0xFB, 0x37, 0x4A, 0x41, 0x3E, 0x74, 0x0F, 0x17, 0x28, 0x16, 0xC7, 0x74, 0x8A, 0x04, 0xC2, 0xF6, 0xCF, 0xBF, 0xC4, 0x2D, 0xA4, 0xD2, 0x10, 0xCE, 0xD3, 0x6A, 0x73, 0xDF, 0xD6, 0x6B, 0xAE, 0x97, 0x3F, 0x4D, 0xE0, 0x06, 0x93, 0x0B, 0x66, 0xC2, 0xB5, 0xCE, 0x11, 0x3C, 0xCD, 0x5D, 0x03, 0x07, 0xA1, 0xA3, 0x55, 0xE0, 0x1B, 0x76, 0x83, 0xFE, 0xBE, 0xC0, 0xA9, 0x29, 0xEF, 0xE5, 0x97, 0x0B, 0x8B, 0xB0, 0xFA, 0xFE, 0xBB, 0x8A, 0x60, 0xA4, 0xE0, 0x18, 0x8A, 0x34, 0xE1, 0x3D, 0x00, 0xB7, 0x8C, 0x97, 0xC6, 0xA4, 0xCE, 0x6A, 0x50, 0xBB, 0xFE, 0xBE, 0xC1, 0x81, 0xE3, 0x0F, 0x71, 0x89, 0x05, 0x73, 0xE3, 0xA7, 0x39, 0x91, 0xD4, 0xA7, 0x13, 0x97, 0x7A, 0x1D, 0x2E, 0x69, 0x86, 0xAA, 0x7A, 0xB5, 0xE5, 0x2D, 0x1E, 0xFA, 0xB5, 0xFF, 0x62, 0x89, 0xA5, 0xD3, 0xAB, 0x4D, 0x34, 0xE1, 0x2E, 0x77, 0x9D, 0x57, 0x6F, 0x4C, 0xC6, 0x86, 0x18, 0xB2, 0xCE, 0xEE, 0xF8, 0x06, 0xAF, 0x21, 0xEB, 0x55, 0xB6, 0x0D, 0xE9, 0x2A, 0x9D, 0xC1, 0x3B, 0xBB, 0x52, 0x65, 0xA0, 0xF3, 0x4E, 0xE6, 0x60, 0xF7, 0x36, 0xCC, 0x27, 0xD2, 0xF9, 0x4B, 0x2E, 0x5D, 0x4A, 0x3E, 0x06, 0xEF, 0x1C, 0x30, 0x63, 0xC9, 0x60, 0x09, 0x40, 0x2B, 0x1A, 0x3C, 0x86, 0x30, 0x40, 0xDC, 0xA0, 0x9F, 0xCC, 0x5F, 0x7F, 0x0A, 0xFB, 0xF6, 0xDF, 0x7A, 0x20, 0x56, 0x9D, 0xA2, 0x7B, 0x0F, 0xDB, 0x02, 0xBA, 0xE5, 0xDB, 0x61, 0xC5, 0x15, 0xAE, 0x9A, 0x85, 0x8F, 0xFA, 0x13, 0x60, 0x15, 0x09, 0x03, 0x26, 0xE6, 0x32, 0x02, 0xB4, 0xD1, 0x6E, 0x68, 0xBC, 0x8C, 0x7F, 0x51, 0x2A, 0x42, 0x32, 0xE4, 0xC9, 0xDA, 0x93, 0x5E, 0x5C, 0x9F, 0x63, 0x97, 0x42, 0x68, 0x9B, 0xC8, 0x81, 0x6B, 0xAD, 0xCE, 0xF3, 0x3C, 0xAB, 0x08, 0x56, 0x5B, 0xA0, 0x68, 0xDA, 0x48, 0x1A, 0x7A, 0x1C, 0x56, 0xB5, 0x92, 0xA2, 0x0D, 0xD1, 0x09, 0x30, 0x01, 0x43, 0x54, 0x13, 0xA8, 0xE7, 0xF6, 0x3E, 0x70, 0x4D, 0xBE, 0x59, 0x82, 0x1F, 0x7E, 0x6D, 0x33, 0xA2, 0x6B, 0x16, 0x23, 0x69, 0x0D, 0x88, 0x1E, 0xE8, 0xCF, 0x6D, 0x40, 0xE2, 0x7C, 0x7F, 0x97, 0xCF, 0x97, 0x0B, 0x26, 0x57, 0x47, 0xB0, 0x30, 0x74, 0x62, 0xE7, 0x47, 0xD8, 0x7A, 0xED, 0x89, 0x81, 0x62, 0xB0, 0x8F, 0x32, 0xA5, 0x05, 0x03, 0x4C, 0x5E, 0x36, 0x2B, 0xE0, 0xDA, 0x70, 0x06, 0x70, 0x9A, 0xEA, 0x30, 0xFD, 0xC0, 0xB3, 0x66, 0x7D, 0x0D, 0xF5, 0x33, 0x1A, 0x20, 0xD7, 0x88, 0x6F, 0x59, 0xED, 0xE0, 0x9D, 0xD1, 0x0B, 0x3F, 0x24, 0x93, 0x96, 0xD2, 0x74, 0xC5, 0x3B, 0xB5, 0x60, 0xF0, 0x00, 0x47, 0x0F, 0xD4, 0x45, 0xDD, 0x73, 0x7E, 0x98, 0x8C, 0xDD, 0xA9, 0x04, 0xEF, 0xF2, 0x44, 0x85, 0xBD, 0x05, 0xC1, 0x46, 0x4B, 0x65, 0x4F, 0xA4, 0x12, 0xF6, 0xEA, 0x6F, 0x6E, 0x78, 0x3D, 0x74, 0x94, 0x52, 0x5A, 0x54, 0x67, 0xC3, 0xA4, 0x59, 0x9F, 0x14, 0x4A, 0x1B, 0xAF, 0x98, 0xBB, 0xD3, 0xC0, 0x2E, 0x59, 0xC7, 0xB0, 0x21, 0xD3, 0xB2, 0xF2, 0xD8, 0x36, 0xE8, 0xD6, 0x6F, 0xE2, 0xDD, 0x55, 0x28, 0x41, 0xDF, 0x4F, 0x96, 0x81, 0xF8, 0x01, 0x67, 0x62, 0x95, 0xC8, 0x13, 0xF1, 0x4C, 0x2A, 0x6A, 0x57, 0x33, 0x16, 0x18, 0x84, 0xB5, 0x44, 0xEC, 0xC8, 0x95, 0xEB, 0xC1, 0x26, 0x3A, 0x8B, 0xC0, 0xC0, 0x43, 0xBA, 0x0D, 0x42, 0xFB, 0xF5, 0xC2, 0x07, 0x87, 0x97, 0x59, 0x7E, 0x51, 0x10, 0xD3, 0x1F, 0x21, 0x43, 0x41, 0xB6, 0x58, 0x07, 0x4C, 0x0E, 0x73, 0x94, 0x99, 0x99, 0x12, 0x2C, 0x4F, 0x66, 0x48, 0xCA, 0xF5, 0x49, 0x7E, 0x06, 0x9B, 0x9C, 0x29, 0x70, 0x1D, 0xE1, 0xDD, 0x23, 0xEC, 0x89, 0x80, 0xAC, 0x0B, 0xDA, 0xB8, 0xE5, 0xC6, 0x6E, 0x97, 0xD5, 0xD6, 0x8F, 0xF2, 0x85, 0x46, 0x1A, 0xBD, 0x35, 0x18, 0x4A, 0xB5, 0x71, 0x77, 0x11, 0x4F, 0x34, 0x88, 0x69, 0x17, 0xD6, 0x1F, 0x8B, 0x11, 0x5E, 0x27, 0x42, 0xCB, 0x23, 0x98, 0x55, 0xF2, 0xA7, 0xC1, 0x36, 0x5A, 0x30, 0x89, 0xA9, 0x8B, 0xFA, 0x93, 0x34, 0x59, 0xC3, 0xF1, 0x7F, 0xEC, 0x5A, 0xFA, 0xFE, 0x8E, 0xB5, 0x57, 0x99, 0x1D, 0x88, 0xF4, 0x0F, 0xA0, 0x85, 0xD0, 0x25, 0x4D, 0x67, 0xCE, 0xA1, 0xFB, 0xDE, 0x91, 0x25, 0x30, 0xB9, 0x70, 0x16, 0x99, 0xC2, 0xF1, 0xFA, 0xD6, 0x4C, 0x1F, 0xE2, 0x76, 0x5E, 0x9F, 0xF7, 0xA9, 0xD8, 0xD3, 0xFA, 0xEF, 0x42, 0x72, 0xCE, 0xA1, 0x9A, 0x44, 0xA9, 0x4B, 0x80, 0x74, 0xEC, 0xF6, 0x32, 0xE9, 0x61, 0x99, 0xD5, 0xE0, 0x11, 0x44, 0x75, 0x27, 0x5F, 0xEC, 0x9D, 0x14, 0xEF, 0x92, 0x3C, 0xE4, 0x19, 0x6A, 0x75, 0xAF, 0x26, 0xBB, 0x01, 0xE8, 0x27, 0x73, 0xF5, 0xBF, 0x8F, 0x59, 0x53, 0x41, 0xDE, 0xB2, 0x21, 0xB1, 0x8D, 0xEB, 0xBB, 0xDB, 0x89, 0xC4, 0xF8, 0x9A, 0xCC, 0x50, 0xEF, 0xA8, 0x5C, 0xDF, 0xEE, 0x53, 0x5D, 0x4E, 0x0E, 0x7E, 0x4B, 0xED, 0x3A, 0xA1, 0xB9, 0x29, 0x24, 0xD3, 0xC2, 0x11, 0x6A, 0xE4, 0x83, 0x4D, 0xA8, 0x06, 0xA3, 0xD3, 0x8B, 0x01, 0xDB, 0x2E, 0xB1, 0x70, 0xC9, 0xB5, 0x38, 0xAE, 0x57, 0xA2, 0x09, 0x9E, 0x82, 0xFC, 0x86, 0x36, 0x0F, 0xB6, 0x1B, 0x75, 0x1A, 0x76, 0x4C, 0x19, 0x38, 0xF8, 0x42, 0x82, 0xA8, 0x73, 0x95, 0x9E, 0x07, 0xD9, 0xEC, 0x0A, 0x8A, 0x72, 0x2C, 0xA5, 0x43, 0x40, 0x91, 0x0A, 0x12, 0xD3, 0xEC, 0xE4, 0x87, 0x65, 0xD4, 0x9E, 0xDF, 0x17, 0x05, 0x95, 0x9C, 0x38, 0x1A, 0x3E, 0x11, 0x70, 0x56, 0x0C, 0x8F, 0xF8, 0x5A, 0x60, 0xB5, 0xA4, 0x0B, 0x31, 0x93, 0x47, 0xDE, 0x3B, 0x89, 0x99, 0xCA, 0xFC, 0x99, 0xB7, 0x89, 0xA7, 0xE6, 0xC8, 0x86, 0x89, 0x6B, 0x63, 0x21, 0x1C, 0x08, 0x31, 0x9E, 0x2E, 0xBD, 0xE1, 0x7D, 0x93, 0x3F, 0x16, 0x85, 0xEA, 0xAB, 0xCB, 0x3B, 0xAA, 0xE9, 0x1E, 0x43, 0x61, 0xAD, 0x52, 0x27, 0xA8, 0x57, 0x06, 0x5A, 0x61, 0x1B, 0xE6, 0x0B, 0x53, 0x1A, 0x16, 0x76, 0xEF, 0xC8, 0x11, 0x01, 0xA0, 0xEF, 0xF5, 0x65, 0x78, 0x1A, 0xEC, 0xCD, 0x70, 0x29, 0xFB, 0x21, 0x50, 0xA2, 0x81, 0xB0, 0xF6, 0xD4, 0x23, 0xE7, 0x43, 0xD6, 0x18, 0x36, 0x09, 0x48, 0x2C, 0x97, 0x6B, 0xF3, 0xB4, 0xDB, 0xC4, 0x6C, 0x2A, 0x89, 0xC4, 0x16, 0x76, 0x9C, 0xEF, 0x97, 0x6F, 0x22, 0x6A, 0x9E, 0x39, 0x22, 0xC0, 0xBD, 0xB1, 0xE5, 0x33, 0xB0, 0x93, 0xE4, 0x56, 0x95, 0x96, 0x41, 0x98, 0x40, 0x97, 0xEA, 0xB4, 0x23, 0x80, 0x75, 0xDF, 0xAE]
        
        let value: ClientStartError = #"""
        Client error
        ver.62 CharacterName(), WorldID(-1), ChID(-1)
        ==== 2024/5/4 07:23:06.597 ==============================
        PID(AF8), TID(B7C)
        Exception code: C0000005 ACCESS_VIOLATION
        Fault Address:  708B5293 01:00004293
        Module: C:\Windows\SYSTEM32\WINMMBASE.dll

        Registers:
        EAX:00000000
        EBX:00000000
        ECX:00000001
        EDX:00000000
        ESI:00000000
        EDI:00000000
        CS:EIP:001B:708B5293
        SS:ESP:0023:0019E240  EBP:0019E25C
        DS:0023  ES:0023  FS:003B  GS:0023
        Flags:00210202
        DBGHELP.DLL or its exported functions not found

        Call stack:
        Address   Frame     Logical addr  Module
        708B5293  0019E25C  0001:00004293 C:\Windows\SYSTEM32\WINMMBASE.dll
        708B50D7  0019E388  0001:000040D7 C:\Windows\SYSTEM32\WINMMBASE.dll
        708B5037  0019E39C  0001:00004037 C:\Windows\SYSTEM32\WINMMBASE.dll
        72DC3D2A  0019E580  0001:00002D2A C:\Windows\SYSTEM32\MSACM32.dll
        72DC6983  0019E59C  0001:00005983 C:\Windows\SYSTEM32\MSACM32.dll
        72DC496F  0019E5C0  0001:0000396F C:\Windows\SYSTEM32\MSACM32.dll
        72DCA7AC  0019E5F4  0001:000097AC C:\W
        """#
    }
    
    func testGuestLoginRequest() throws {
        
        let encryptedData = Data([0xC9, 0x12, 0xA9, 0x11])
        let packetData = Data([0x02, 0x00, 0x00, 0x00])
        let nonce: Nonce = 0x46727AE0
        
        let packet = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(packet.data, packetData)
        
        let value = GuestLoginRequest()
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testLoginRequest() throws {
        
        let encryptedData = Data([0x41, 0xB4, 0x8A, 0x04, 0x55, 0x9A, 0xDE, 0x80, 0xD0, 0x58, 0x2C, 0x44, 0x64, 0x27, 0xA1, 0x22, 0x1A, 0x84, 0x14, 0x0F, 0xE5, 0xEE, 0xB7, 0xEC, 0x67, 0xA4, 0x68, 0x60, 0x15, 0x8A, 0x6F, 0xDF, 0xDA, 0x52, 0xFC, 0x04, 0x1F, 0xAF, 0x25, 0x7C, 0x62, 0x82, 0x5C])
        
        let decryptedData = Data([0x01, 0x00, 0x05, 0x00, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x05, 0x00, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB, 0x97, 0xC5, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x85, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        
        let nonce: Nonce = 0x46727AB3
        
        let packet = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
                
        let value = LoginRequest(
            username: "admin",
            password: "admin",
            value0: 0x00,
            value1: 0x00,
            hardwareID: 3200620507,
            value2: 0x00,
            value3: 50821,
            value4: 0x00,
            value5: 0x02,
            value6: 0x00,
            value7: 0x00
        )
        
        XCTAssertEqual(packet.opcode, LoginRequest.opcode)
        XCTAssertEqual(packet.data, decryptedData)
        XCTAssertEqual(packet, Packet(decryptedData))
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testSuccessLoginResponse() throws {
        
        let encryptedData = Data([0xB9, 0x27, 0x95, 0x27, 0x4A, 0xBB, 0xC5, 0xDD, 0xDC, 0xD4, 0x08, 0xBE, 0x55, 0xFD, 0x75, 0xF0, 0xCC, 0x74, 0x50, 0x95, 0xE2, 0xB2, 0x9D, 0xCD, 0x22, 0x53, 0xF6, 0x5E, 0xF7, 0xD6, 0x44, 0xE3, 0x93, 0x2F, 0xD3, 0xA5, 0x16, 0xAD, 0x6C, 0xFE, 0x3F, 0x55, 0xC5, 0x38, 0xBD, 0xED, 0x46, 0x50])
        
        let packetData = Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x6A, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x05, 0x00, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x3D, 0x0B, 0x28, 0x64, 0xC5, 0x01, 0x08, 0x00, 0x00, 0x00])
        
        let nonce: Nonce = 0x523078D8
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = LoginResponse.success(username: "admin")
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        XCTAssertEncode(value, packet)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.data, encryptedData)
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.parametersSize, 44)
        XCTAssertEqual(encrypted.header, UInt32(bigEndian: 0xB9279527))
    }
    
    func testPinOperationRequest() throws {
        
        let packetData = Data([0x09, 0x00, 0x01, 0x01, 0xFF, 0x6A, 0x01, 0x00, 0x00, 0x00])
        
        let encryptedData = Data([0xAE, 0xD7, 0xB7, 0x85, 0xD7, 0x56, 0x9A, 0xBE, 0x5E, 0x1A])
        
        let nonce: Nonce = 0x53964806
        
        let packet = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = PinOperationRequest(value0: 1, value1: 1)
        XCTAssertEqual(packet, Packet(packetData))
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        XCTAssertDecode(value, packet)
    }
    
    func testPinOperationResponse() throws {
        
        let encryptedData = Data([0x30, 0x16, 0x33, 0x16, 0xF5, 0xE4, 0x8F])
        
        let packetData = Data([0x06, 0x00, 0x00])
        
        let nonce: Nonce = 0x8AC3F1E9
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = PinOperationResponse.success
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.data, encryptedData)
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.parametersSize, 3)
        XCTAssertEqual(encrypted.header, UInt32(bigEndian: 0x30163316))
    }
    
    func testServerListResponse() throws {
        
        let packetData = Data([0x0A, 0x00, 0x00, 0x08, 0x00, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x20, 0x30, 0x02, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x02, 0x0A, 0x00, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x20, 0x30, 0x2D, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x20, 0x30, 0x2D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00])
        
        let encryptedData = Data([0x17, 0xCB, 0x29, 0xCB, 0x00, 0x0D, 0x49, 0x3D, 0x99, 0xDC, 0xBF, 0xB3, 0xFD, 0x73, 0xEE, 0x54, 0xE9, 0x69, 0x4D, 0x9F, 0x49, 0xFA, 0xC9, 0xDC, 0x67, 0x23, 0xA4, 0x8E, 0xE5, 0x02, 0x7F, 0x5D, 0x01, 0xE3, 0x5C, 0xB8, 0xE9, 0xC1, 0x28, 0x7B, 0xE1, 0x36, 0xB6, 0x55, 0x7A, 0x15, 0xBC, 0x97, 0xE4, 0xA0, 0xF1, 0x35, 0x09, 0x5B, 0xAF, 0x84, 0xC7, 0x8D, 0x90, 0x98, 0x41, 0xCF, 0xAC, 0xDF, 0x76, 0x07])
        
        let nonce: Nonce = 0x4001D634
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = ServerListResponse.world(.init(
            id: 0,
            name: " World 0",
            flags: 0x02,
            eventMessage: "",
            rateModifier: 0x64,
            eventXP: 0x00,
            rateModifier2: 0x64,
            dropRate: 0x00,
            value0: 0x00,
            channels: [
                ServerListResponse.Channel(
                    name: " World 0-1",
                    load: 0,
                    value0: 0x01,
                    id: 0
                ),
                ServerListResponse.Channel(
                    name: " World 0-2",
                    load: 0,
                    value0: 0x01,
                    id: 1
                )
            ],
            value1: 0x00
        ))
        
        XCTAssertEncode(value, packet)
        XCTAssertEqual(packet.opcode, ServerListResponse.opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testEndServerList() throws {
        
        let packetData = Data([0x0A, 0x00, 0xFF])
        let encryptedData = Data([0xCE, 0x3C, 0xCD, 0x3C, 0x0D, 0x00, 0x6A])
        let nonce: Nonce = 0x9C290FC3
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = ServerListResponse.end
        
        XCTAssertEncode(value, packet)
        XCTAssertEqual(packet.opcode, ServerListResponse.opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testServerStatusRequest() {
        
        let packet: Packet<ClientOpcode> = [0x06, 0x00, 0x00, 0x00]
        let value = ServerStatusRequest(world: 0, channel: 0)
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testServerStatusResponse() {
        
        let packet: Packet<ServerOpcode> = [0x03, 0x00, 0x00, 0x00]
        let value = ServerStatusResponse(.normal)
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
    }
    
    func testCharacterListResponse() throws {
        
        let packetData = Data([0x0B, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x41, 0x64, 0x6D, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x4E, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0x30, 0x75, 0x30, 0x75, 0x6A, 0x67, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x34, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x3D, 0x36, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x01, 0x4E, 0x75, 0x00, 0x00, 0x05, 0x82, 0xDE, 0x0F, 0x00, 0x06, 0xA2, 0x2C, 0x10, 0x00, 0x09, 0xD9, 0xD0, 0x10, 0x00, 0x01, 0x75, 0x4B, 0x0F, 0x00, 0x07, 0x81, 0x5B, 0x10, 0x00, 0x0B, 0x27, 0x9D, 0x16, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00])
        
        let encryptedData = Data([0x60, 0x59, 0xD1, 0x59, 0x7A, 0xBC, 0x1A, 0x42, 0x35, 0x1E, 0x17, 0x21, 0xF0, 0xBC, 0x27, 0x85, 0x75, 0x39, 0x8A, 0x00, 0xDF, 0xFA, 0xC7, 0x78, 0x98, 0xEB, 0xA8, 0xC4, 0xE1, 0x89, 0xB4, 0x3B, 0x70, 0xFD, 0xFC, 0xEC, 0x82, 0xB0, 0xC4, 0x06, 0x6C, 0x2D, 0xDF, 0x8A, 0x16, 0x40, 0x15, 0xBE, 0x76, 0xD2, 0x4B, 0xF8, 0x41, 0xB7, 0x13, 0xE9, 0xE2, 0x55, 0x23, 0x7B, 0xC2, 0x7D, 0x2A, 0xE5, 0xDB, 0xFC, 0x77, 0x1F, 0xA0, 0x0F, 0xB7, 0x2C, 0xCE, 0x3E, 0x86, 0x9B, 0xA4, 0x4A, 0xCC, 0x07, 0x38, 0xF3, 0x41, 0xF3, 0xAD, 0x35, 0xF5, 0x3C, 0xF3, 0x65, 0x36, 0x91, 0x11, 0x59, 0xDE, 0xCE, 0xC4, 0x5E, 0xAD, 0x5A, 0x58, 0x3A, 0x9B, 0xA6, 0x2A, 0x06, 0x2A, 0xF9, 0xC8, 0x70, 0x25, 0xA6, 0x66, 0xD4, 0x58, 0x89, 0x4E, 0xE6, 0x52, 0xBE, 0x72, 0x40, 0xCA, 0xC7, 0x74, 0x0D, 0x80, 0x36, 0x5D, 0x56, 0x2E, 0xE6, 0x86, 0xC0, 0x50, 0xF1, 0x9F, 0x70, 0x02, 0x03, 0xCF, 0xA5, 0xC7, 0xA3, 0xE0, 0xA6, 0x2B, 0x67, 0xB5, 0xAA, 0x8A, 0x4C, 0x5F, 0x00, 0xAD, 0xB3, 0xB3, 0x23, 0x5B, 0xDD, 0x29, 0x0B, 0x09, 0xCE, 0x71, 0x33, 0x02, 0x2D, 0x19, 0x5D, 0xA3, 0x8F, 0xB3, 0x65, 0x67, 0xB7, 0x7E, 0xB6, 0xF7, 0xE9, 0xBD])
        
        let nonce: Nonce = 0x0C5EA1A6
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = CharacterListResponse(
            characters: [
                MapleStory62.CharacterListResponse.Character(
                    stats: MapleStory62.CharacterListResponse.CharacterStats(
                        id: 1,
                        name: "Admin",
                        gender: .male,
                        skinColor: .normal,
                        face: 20000,
                        hair: 30030,
                        value0: 0,
                        value1: 0,
                        value2: 0,
                        level: 254,
                        job: .buccaneer,
                        str: 32767,
                        dex: 32767,
                        int: 32767,
                        luk: 32767,
                        hp: 30000,
                        maxHp: 30000,
                        mp: 26474,
                        maxMp: 30000,
                        ap: 0,
                        sp: 0,
                        exp: 0,
                        fame: 13337,
                        isMarried: 0,
                        currentMap: 910000000,
                        spawnPoint: 1,
                        value3: 0
                    ),
                    appearance: MapleStory62.CharacterListResponse.CharacterAppeareance(
                        gender: .male,
                        skinColor: .normal,
                        face: 20000,
                        mega: true,
                        hair: 30030,
                        equipment: [5: 0x82DE0F00, 6: 0xA22C1000, 9: 0xD9D01000, 1: 0x754B0F00, 7: 0x815B1000, 11: 0x279D1600],
                        maskedEquipment: [:],
                        cashWeapon: 0,
                        value0: 0,
                        value1: 0
                    ),
                    rank: MapleStory62.CharacterListResponse.Rank(
                        worldRank: 1,
                        rankMove: 0,
                        jobRank: 1,
                        jobRankMove: 0
                    )
                )
            ],
            maxCharacters: 6
        )
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode, CharacterListResponse.opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testAllCharactersInfo() throws {
        
        let packetData = Data([0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x41, 0x64, 0x6D, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x4E, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x02, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0x30, 0x75, 0x30, 0x75, 0x6A, 0x67, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x34, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x3D, 0x36, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x01, 0x4E, 0x75, 0x00, 0x00, 0x05, 0x82, 0xDE, 0x0F, 0x00, 0x06, 0xA2, 0x2C, 0x10, 0x00, 0x09, 0xD9, 0xD0, 0x10, 0x00, 0x01, 0x75, 0x4B, 0x0F, 0x00, 0x07, 0x81, 0x5B, 0x10, 0x00, 0x0B, 0x27, 0x9D, 0x16, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        
        let encryptedData = Data([0x2A, 0x47, 0x84, 0x47, 0xC5, 0x93, 0xF9, 0xDB, 0x27, 0x75, 0x29, 0x30, 0xDB, 0xA1, 0x78, 0x6C, 0x98, 0x39, 0x4B, 0x93, 0xC0, 0xE9, 0x28, 0x60, 0xCF, 0x53, 0xC2, 0x99, 0x5F, 0x20, 0xD9, 0x11, 0x85, 0x4A, 0xD4, 0x8B, 0x81, 0xA8, 0x6E, 0x67, 0xB3, 0x33, 0x96, 0xE0, 0x5F, 0x3F, 0x9A, 0x66, 0x41, 0xCB, 0x86, 0x4A, 0x4B, 0x33, 0xF4, 0x2E, 0x2E, 0xE7, 0x99, 0xF2, 0xA7, 0xC9, 0x31, 0xE1, 0xFB, 0x45, 0x86, 0x34, 0x2E, 0x56, 0x69, 0x45, 0x4E, 0x31, 0x4D, 0x64, 0xDA, 0x00, 0x4A, 0x53, 0x86, 0x26, 0xD9, 0x31, 0x50, 0xAB, 0x0F, 0xDA, 0xFA, 0xB9, 0x5A, 0x5F, 0x35, 0xAE, 0x1A, 0x04, 0x42, 0x65, 0x93, 0x24, 0x00, 0xD5, 0xDF, 0xDF, 0x22, 0x43, 0x8A, 0x3A, 0xF8, 0x69, 0x7B, 0xE1, 0xD9, 0x69, 0x2B, 0x61, 0x0A, 0xDE, 0x34, 0x66, 0x01, 0x82, 0x86, 0x0F, 0xEE, 0x0A, 0xDC, 0x1E, 0x27, 0xC0, 0x23, 0xE0, 0x18, 0xA4, 0x5E, 0x05, 0xD9, 0xCA, 0x2F, 0x8A, 0x73, 0x46, 0x9A, 0xF7, 0x53, 0xA9, 0x89, 0x70, 0x5A, 0x02, 0x5E, 0x67, 0xE7, 0xE6, 0x89, 0x15, 0x78, 0x7A, 0x5F, 0x4F, 0x31, 0x05, 0x36, 0x82, 0x18, 0xE3, 0x5C, 0xAE, 0xF7, 0x7D, 0x58, 0xC5, 0x91, 0x23, 0x43, 0xDE, 0x90, 0xF7])
        
        let nonce: Nonce = 0x79B9EBB8
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = AllCharactersResponse.characters(world: 0, characters: [
            MapleStory62.CharacterListResponse.Character(
                stats: MapleStory62.CharacterListResponse.CharacterStats(
                    id: 1,
                    name: "Admin",
                    gender: .male,
                    skinColor: .normal,
                    face: 20000,
                    hair: 30030,
                    value0: 0,
                    value1: 0,
                    value2: 0,
                    level: 254,
                    job: .buccaneer,
                    str: 32767,
                    dex: 32767,
                    int: 32767,
                    luk: 32767,
                    hp: 30000,
                    maxHp: 30000,
                    mp: 26474,
                    maxMp: 30000,
                    ap: 0,
                    sp: 0,
                    exp: 0,
                    fame: 13337,
                    isMarried: 0,
                    currentMap: 910000000,
                    spawnPoint: 1,
                    value3: 0
                ),
                appearance: MapleStory62.CharacterListResponse.CharacterAppeareance(
                    gender: .male,
                    skinColor: .normal,
                    face: 20000,
                    mega: true,
                    hair: 30030,
                    equipment: [5: 0x82DE0F00, 6: 0xA22C1000, 9: 0xD9D01000, 1: 0x754B0F00, 7: 0x815B1000, 11: 0x279D1600],
                    maskedEquipment: [:],
                    cashWeapon: 0,
                    value0: 0,
                    value1: 0
                ),
                rank: MapleStory62.CharacterListResponse.Rank(
                    worldRank: 1,
                    rankMove: 0,
                    jobRank: 1,
                    jobRankMove: 0
                )
            )
        ])
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testAllCharactersCount() throws {
        
        let packetData = Data([0x08, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00])
        let encryptedData = Data([0x05, 0xF2, 0x0E, 0xF2, 0xE2, 0x29, 0x45, 0x34, 0xB6, 0x76, 0xC7, 0xD2, 0x18, 0xE4, 0xCF])
        let nonce: Nonce = 0x9786C40D
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = AllCharactersResponse.count(characters: 1, value0: 3)
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testUnknownRequest() throws {
        
        /*
         MaplePacketDecoder encrypted packet 11 C2 86 FB 91 E1 39 D9 05 01 A3
         Recieve IV 25 C1 21 63
         MapleAESOFB.crypt() input: 11 C2 86 FB 91 E1 39 D9 05 01 A3
         MapleAESOFB.crypt() iv: 25 C1 21 63
         MapleAESOFB.crypt() output: D2 D7 4E 76 8E C5 E9 98 72 91 15
         MaplePacketDecoder AES decrypted packet D2 D7 4E 76 8E C5 E9 98 72 91 15
         MaplePacketDecoder custom decrypted packet 1A 00 01 7D 5B D5 EE 00 00 00 00
         Incoming packet 0x001A
         */
        
        let encryptedData = Data([0x11, 0xC2, 0x86, 0xFB, 0x91, 0xE1, 0x39, 0xD9, 0x05, 0x01, 0xA3])
        let packetData = Data([0x1A, 0x00, 0x01, 0x7D, 0x5B, 0xD5, 0xEE, 0x00, 0x00, 0x00, 0x00])
        let nonce: Nonce = 0x25C12163
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        //XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode, .clientError)
    }
    
    func testAllCharactersSelectRequest() throws {
        
        let packetData = Data([0x0E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x30, 0x30, 0x2D, 0x31, 0x43, 0x2D, 0x34, 0x32, 0x2D, 0x34, 0x38, 0x2D, 0x30, 0x37, 0x2D, 0x32, 0x39, 0x15, 0x00, 0x42, 0x43, 0x39, 0x41, 0x37, 0x38, 0x35, 0x36, 0x33, 0x34, 0x31, 0x32, 0x5F, 0x44, 0x42, 0x39, 0x37, 0x43, 0x35, 0x42, 0x45])
        let encryptedData = Data([0xE9, 0x46, 0xD1, 0xA0, 0x6F, 0xE7, 0xE5, 0x54, 0xAF, 0x6C, 0x9C, 0x45, 0x55, 0x8B, 0xDB, 0x3F, 0x7B, 0xCD, 0x1D, 0xEB, 0x4C, 0xB1, 0xB4, 0x82, 0x19, 0xE4, 0x1A, 0x36, 0x8F, 0x08, 0xE6, 0x24, 0x9F, 0xCF, 0x34, 0xFC, 0xF6, 0x1B, 0xB6, 0x43, 0xA8, 0x0A, 0x6F, 0x27, 0x4C, 0x77, 0x9E, 0x5E, 0x82, 0x42, 0x40, 0x8F])
        let nonce: Nonce = 0x2EB61FE4
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = AllCharactersSelectRequest(
            character: 1,
            macAddresses: ""
        )
        
        XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
    }
    
    func testServerIPResponse() throws {
        
        let packetData = Data([0x0C, 0x00, 0x00, 0x00, 0xAC, 0x11, 0x00, 0x03, 0x97, 0x1D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        let encryptedData = Data([0x40, 0x87, 0x53, 0x87, 0x51, 0x66, 0xE7, 0xBF, 0x46, 0xCA, 0xEB, 0xB5, 0xCA, 0xC2, 0xD2, 0x4D, 0xCD, 0xA0, 0x25, 0x60, 0xB2, 0xD9, 0x3C])
        let nonce: Nonce = 0x96278178
        
        let value = ServerIPResponse(
            value0: 0,
            address: MapleStoryAddress(rawValue: "172.17.0.3:7575")!,
            character: 1,
            value1: 0,
            value2: 0
        )
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testCharacterSelectRequest() throws {
        
        let encryptedData = Data([0xAD, 0xEC, 0x71, 0x21, 0x63, 0xEE, 0xD9, 0xB0, 0x70, 0xDB, 0x38, 0xC3, 0xBC, 0x33, 0x7A, 0xA8, 0x1E, 0x47, 0xD8, 0x3B, 0x1F, 0xBD, 0x5E, 0x56, 0xC5, 0x71, 0xDD, 0xEB, 0x02, 0x5C, 0xE8, 0x2C, 0x68, 0x57, 0xBB, 0xF3, 0xD9, 0xF5, 0x5D, 0xE0, 0x1F, 0xB0, 0x76, 0x5F, 0xB3, 0x5F, 0x41, 0x67])
        let packetData = Data([0x13, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x30, 0x30, 0x2D, 0x31, 0x43, 0x2D, 0x34, 0x32, 0x2D, 0x34, 0x38, 0x2D, 0x30, 0x37, 0x2D, 0x32, 0x39, 0x15, 0x00, 0x42, 0x43, 0x39, 0x41, 0x37, 0x38, 0x35, 0x36, 0x33, 0x34, 0x31, 0x32, 0x5F, 0x44, 0x42, 0x39, 0x37, 0x43, 0x35, 0x42, 0x45])
        let nonce: Nonce = 0xD1D3B2FA
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = CharacterSelectRequest(
            character: 1,
            macAddresses: "00-1C-42-48-07-29"
        )
        
        XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode, .characterSelect)
    }
    
    func testCheckNameRequest() throws {
        
        let encryptedData = Data([0x2F, 0x56, 0x73, 0xD8, 0xCA, 0xBE, 0x52, 0x36])
        let packetData = Data([0x15, 0x00, 0x04, 0x00, 0x63, 0x64, 0x61, 0x31])
        let nonce: Nonce = 0xA7599238
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = CheckCharacterNameRequest(name: "cda1")
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode, .checkCharacterName)
    }
    
    func testCheckNameResponse() throws {
        
        let packetData = Data([0x0D, 0x00, 0x04, 0x00, 0x63, 0x64, 0x61, 0x31, 0x00])
        let encryptedData = Data([0x27, 0x79, 0x2E, 0x79, 0xE4, 0xF8, 0xC7, 0xC2, 0x9C, 0x9B, 0xA7, 0xFE, 0xDF])
        let nonce: Nonce = 0x2122E686
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = CheckCharacterNameResponse(name: "cda1", isUsed: false)
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode, type(of: value).opcode)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testCreateCharacterRequest() throws {
        
        let packetData = Data([0x16, 0x00, 0x04, 0x00, 0x63, 0x64, 0x61, 0x31, 0x20, 0x4E, 0x00, 0x00, 0x4E, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xDE, 0x0F, 0x00, 0xA2, 0x2C, 0x10, 0x00, 0x81, 0x5B, 0x10, 0x00, 0xF0, 0xDD, 0x13, 0x00, 0x00, 0x06, 0x09, 0x05, 0x05])
        
        let encryptedData = Data([0x1C, 0x44, 0x4B, 0xA6, 0xA4, 0x23, 0x2F, 0x8B, 0x12, 0x06, 0x1C, 0xD9, 0x34, 0x71, 0xCF, 0x13, 0x3F, 0x24, 0xAF, 0x21, 0xE7, 0x5B, 0x24, 0x74, 0xC0, 0xB2, 0xCB, 0x1F, 0x7C, 0xC1, 0xDF, 0x81, 0xBB, 0x7C, 0x18, 0x85, 0x33, 0x96, 0x30, 0xD9, 0xEE, 0x68, 0xF5, 0xF0, 0x40])
        
        let nonce: Nonce = 0x0B96E186
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = CreateCharacterRequest(
            name: "cda1",
            face: 20000,
            hair: 30030,
            hairColor: 0,
            skinColor: 0,
            top: 1040002,
            bottom: 1060002,
            shoes: 1072001,
            weapon: 1302000,
            gender: .male,
            str: 6,
            dex: 9,
            int: 5,
            luk: 5
        )
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode.rawValue, 0x16)
    }
    
    func testCreateCharacterResponse() throws {
        
        let packetData = Data([0x0E, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x63, 0x64, 0x61, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x4E, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0x05, 0x00, 0x05, 0x00, 0x32, 0x00, 0x32, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x01, 0x4E, 0x75, 0x00, 0x00, 0x05, 0x82, 0xDE, 0x0F, 0x00, 0x06, 0xA2, 0x2C, 0x10, 0x00, 0x07, 0x81, 0x5B, 0x10, 0x00, 0x0B, 0xF0, 0xDD, 0x13, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        
        let encryptedData = Data([0xC9, 0x4D, 0x6B, 0x4D, 0x5A, 0x20, 0x2A, 0x47, 0x5E, 0xF6, 0x0A, 0xAC, 0x8F, 0x20, 0x01, 0x20, 0x87, 0xBB, 0xCC, 0xCD, 0xDA, 0x2C, 0x40, 0xE1, 0xAB, 0xF6, 0x6A, 0x94, 0xE4, 0x51, 0x09, 0xB5, 0x6B, 0x35, 0x9E, 0xFC, 0xFD, 0x12, 0x03, 0x75, 0x30, 0x54, 0x56, 0x0E, 0xB1, 0xE3, 0x68, 0xF8, 0xD4, 0xAD, 0xA0, 0xF6, 0xBA, 0x5D, 0x43, 0x64, 0x18, 0xB0, 0x0C, 0x9B, 0xB9, 0x27, 0x1D, 0xE7, 0xD1, 0x1A, 0x02, 0xB7, 0x1B, 0x9D, 0xAD, 0x9A, 0x16, 0xA7, 0xE2, 0x86, 0x03, 0x51, 0x3E, 0xCC, 0x89, 0x90, 0x73, 0xA1, 0x12, 0x98, 0x29, 0x16, 0xB0, 0x29, 0xEE, 0x3D, 0x90, 0xB0, 0x68, 0x4F, 0x76, 0x87, 0x50, 0x45, 0x1B, 0x4A, 0xA0, 0x34, 0xEF, 0xB1, 0x60, 0x93, 0x2B, 0xB5, 0x61, 0xC4, 0xBE, 0x7E, 0xC1, 0x3E, 0x7A, 0x2A, 0x8F, 0x83, 0x66, 0xA8, 0x8F, 0x01, 0x33, 0x69, 0x7C, 0x55, 0xF5, 0x81, 0xBD, 0xF9, 0x81, 0xCF, 0xEF, 0x7C, 0x95, 0xF5, 0x86, 0xA5, 0x2C, 0xEB, 0xCF, 0xDC, 0xF2, 0x3F, 0xDB, 0x9F, 0xCA, 0x31, 0xA4, 0x3C, 0x97, 0xF5, 0x7E, 0x83, 0x80, 0x1A, 0xE0, 0xE8, 0xF3, 0x0B, 0x06, 0x6F, 0x20, 0xB4])
        
        let nonce: Nonce = 0xCFA908B2
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = CreateCharacterResponse(
            error: false,
            character: MapleStory62.CharacterListResponse.Character(
                stats: MapleStory62.CharacterListResponse.CharacterStats(
                    id: 15,
                    name: "cda1",
                    gender: .male,
                    skinColor: .normal,
                    face: 20000,
                    hair: .buzz(.black),
                    value0: 0,
                    value1: 0,
                    value2: 0,
                    level: 1,
                    job: .beginner,
                    str: 6,
                    dex: 9,
                    int: 5,
                    luk: 5,
                    hp: 50,
                    maxHp: 50,
                    mp: 5,
                    maxMp: 5,
                    ap: 0,
                    sp: 0,
                    exp: 0,
                    fame: 0,
                    isMarried: 0,
                    currentMap: 0,
                    spawnPoint: 0,
                    value3: 0
                ),
                appearance: MapleStory62.CharacterListResponse.CharacterAppeareance(
                    gender: .male,
                    skinColor: .normal,
                    face: 20000,
                    mega: true,
                    hair: 30030,
                    equipment: [5: 0x82DE0F00, 6: 0xA22C1000, 7: 0x815B1000, 11: 0xF0DD1300],
                    maskedEquipment: [:],
                    cashWeapon: 0,
                    value0: 0,
                    value1: 0
                ),
                rank: MapleStory62.CharacterListResponse.Rank(
                    worldRank: 0,
                    rankMove: 0,
                    jobRank: 0,
                    jobRankMove: 0
                )
            )
        )
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode.rawValue, 0x0E)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
    
    func testDeleteCharacterRequest() throws {
        
        let encryptedData = Data([0xF5, 0x76, 0xB4, 0x51, 0xE5, 0xA1, 0x98, 0xCE, 0x62, 0x9A])
        let packetData = Data([0x17, 0x00, 0xAC, 0xBD, 0x9A, 0x00, 0x10, 0x00, 0x00, 0x00])
        let nonce: Nonce = 0xB43E8634
        
        guard let packet = Packet<ClientOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let decrypted = try Packet<ClientOpcode>.decrypt(
            encryptedData,
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        let value = DeleteCharacterRequest(
            date: 10141100,
            character: 16
        )
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(decrypted, packet)
        XCTAssertEqual(packet.opcode.rawValue, 0x0017)
    }
    
    func testDeleteCharacterResponse() throws {
        
        let packetData = Data([0x0F, 0x00, 0x10, 0x00, 0x00, 0x00, 0x12])
        let encryptedData = Data([0x50, 0x90, 0x57, 0x90, 0x0B, 0x83, 0xF6, 0x3A, 0x41, 0x9A, 0xF7])
        let nonce: Nonce = 0x6709916F
        
        guard let packet = Packet<ServerOpcode>(data: packetData) else {
            XCTFail()
            return
        }
        
        let value = DeleteCharacterResponse(
            character: 16,
            state: 18
        )
        
        XCTAssertEncode(value, packet)
        XCTAssertDecode(value, packet)
        XCTAssertEqual(packet.opcode.rawValue, 0x0F)
        
        let encrypted = try packet.encrypt(
            key: .default,
            nonce: nonce,
            version: .v62
        )
        
        XCTAssertEqual(encrypted.length, packet.data.count)
        XCTAssertEqual(encrypted.data, encryptedData)
    }
}
