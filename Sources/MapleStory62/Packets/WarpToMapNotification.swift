//
//  WarpToMapNotification.swift
//  
//
//  Created by Alsey Coleman Miller on 12/23/22.
//

import Foundation

public enum WarpToMapNotification: MapleStoryPacket, Codable, Equatable, Hashable {
    
    public static var opcode: Opcode { 0x5C }
    
    case characterInfo(CharacterInfo)
}

public extension WarpToMapNotification {
    
    typealias CharacterStats = CharacterListResponse.CharacterStats
    
    struct CharacterInfo: Codable, Equatable, Hashable {
        
        public let channel: UInt32
        
        public let random0: UInt32
        
        public let random1: UInt32
        
        public let random2: UInt32
        
        public let stats: CharacterStats
        
        public let buddyListSize: UInt8
        
        public let meso: UInt32
        
        public let equipSlots: UInt8 // 100
        
        public let useSlots: UInt8 // 100
        
        public let setupSlots: UInt8 // 100
        
        public let etcSlots: UInt8 // 100
        
        public let cashSlots: UInt8 // 100
        /*
        public let equipped: [Item]
        
        public let equip: [Item]
        
        public let use: [Item]
        
        public let setup: [Item]
        
        public let etc: [Item]
        
        public let cash: [Item]
        
        public let skills: [Skill]
        
        public let questInfo: QuestInfo
        
        public let rings: [Ring]
        
        public let date: Date*/
    }
    
    struct Item: Codable, Equatable, Hashable {
        
        public let position: UInt8
        
        public let type: UInt8
        
        public let itemID: UInt8
    }
    
    struct Skill: Codable, Equatable, Hashable, Identifiable {
        
        public let id: UInt32
        
        public let level: UInt32
        
        public let masterLevel: UInt32?
    }
    
    struct QuestInfo: Codable, Equatable, Hashable {
        
        
    }
    
    struct Ring: Codable, Equatable, Hashable {
        
    }
}

extension WarpToMapNotification: MapleStoryCodable {
    
    public init(from container: MapleStoryDecodingContainer) throws {
        let characterInfo = try container.decode(CharacterInfo.self, forKey: CodingKeys.characterInfo)
        self = .characterInfo(characterInfo)
    }
    
    public func encode(to container: MapleStoryEncodingContainer) throws {
        switch self {
        case let .characterInfo(characterInfo):
            try container.encode(characterInfo, forKey: CodingKeys.characterInfo)
        }
    }
}

extension WarpToMapNotification.CharacterInfo: MapleStoryCodable {
    
    static var magic: Data { Data([0xff, 0xc9, 0x9a, 0x3b]) }
    
    public init(from container: MapleStoryDecodingContainer) throws {
        self.channel = try container.decode(UInt32.self, forKey: CodingKeys.channel)
        let _ = try container.decode(UInt8.self)
        let _ = try container.decode(UInt8.self)
        let _ = try container.decode(UInt16.self)
        self.random0 = try container.decode(UInt32.self, forKey: CodingKeys.random0)
        self.random1 = try container.decode(UInt32.self, forKey: CodingKeys.random1)
        self.random2 = try container.decode(UInt32.self, forKey: CodingKeys.random2)
        let _ = try container.decode(Int64.self)
        self.stats = try container.decode(WarpToMapNotification.CharacterStats.self, forKey: CodingKeys.stats)
        self.buddyListSize = try container.decode(UInt8.self, forKey: CodingKeys.buddyListSize)
        self.meso = try container.decode(UInt32.self, forKey: CodingKeys.meso)
        self.equipSlots = try container.decode(UInt8.self, forKey: CodingKeys.equipSlots)
        self.useSlots = try container.decode(UInt8.self, forKey: CodingKeys.useSlots)
        self.setupSlots = try container.decode(UInt8.self, forKey: CodingKeys.setupSlots)
        self.etcSlots = try container.decode(UInt8.self, forKey: CodingKeys.etcSlots)
        self.cashSlots = try container.decode(UInt8.self, forKey: CodingKeys.cashSlots)
    }
    
    public func encode(to container: MapleStoryEncodingContainer) throws {
        try container.encode(channel, forKey: CodingKeys.channel)
        try container.encode(UInt8(1))
        try container.encode(UInt8(1))
        try container.encode(UInt16(0))
        try container.encode(random0, forKey: CodingKeys.random0)
        try container.encode(random1, forKey: CodingKeys.random1)
        try container.encode(random2, forKey: CodingKeys.random2)
        try container.encode(Int64(-1))
        try container.encode(stats, forKey: CodingKeys.stats)
        try container.encode(buddyListSize, forKey: CodingKeys.buddyListSize)
        try container.encode(meso, forKey: CodingKeys.meso)
        try container.encode(equipSlots, forKey: CodingKeys.equipSlots)
        try container.encode(useSlots, forKey: CodingKeys.useSlots)
        try container.encode(setupSlots, forKey: CodingKeys.setupSlots)
        try container.encode(etcSlots, forKey: CodingKeys.etcSlots)
        try container.encode(cashSlots, forKey: CodingKeys.cashSlots)
        /*
        try container.encodeArray(equipped, forKey: CodingKeys.equipped)
        try container.encode(UInt16(0))
        try container.encodeArray(equip, forKey: CodingKeys.equip)
        try container.encode(UInt8(0))
        try container.encodeArray(use, forKey: CodingKeys.use)
        try container.encode(UInt8(0))
        try container.encodeArray(setup, forKey: CodingKeys.setup)
        try container.encode(UInt8(0))
        try container.encodeArray(etc, forKey: CodingKeys.etc)
        try container.encode(UInt8(0))
        try container.encodeArray(cash, forKey: CodingKeys.cash)
        try container.encode(UInt8(0))
        try container.encode(UInt16(skills.count))
        try container.encodeArray(skills, forKey: CodingKeys.skills)
        try container.encode(UInt16(0))
        try container.encode(questInfo, forKey: CodingKeys.questInfo)
        try container.encodeArray(rings, forKey: CodingKeys.rings)
        for _ in 0 ..< 15 {
            try container.encode(Self.magic)
        }
        try container.encode(UInt32(0))
        try container.encode(date, forKey: CodingKeys.date)
        */
        
        let suffixData = Data([0x5C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x6A, 0x7A, 0xEB, 0x6B, 0xF8, 0x17, 0xD7, 0x13, 0xCD, 0xC5, 0xAD, 0x78, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6C, 0x65, 0x6D, 0x61, 0x6E, 0x63, 0x64, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x47, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x09, 0x00, 0x06, 0x00, 0x32, 0x00, 0x32, 0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x64, 0x64, 0x64, 0x64, 0x64, 0x05, 0x01, 0x82, 0xDE, 0x0F, 0x00, 0x00, 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0xA2, 0x2C, 0x10, 0x00, 0x00, 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x85, 0x5B, 0x10, 0x00, 0x00, 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0xF0, 0xDD, 0x13, 0x00, 0x00, 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xE9, 0x7D, 0x3F, 0x00, 0x00, 0x00, 0x80, 0x05, 0xBB, 0x46, 0xE6, 0x17, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0xFF, 0xC9, 0x9A, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x80, 0x59, 0xC3, 0x5B, 0x89, 0x16, 0xD9, 0x01])
        
        let suffixLength = suffixData.count - container.count
        
        if suffixLength > 0 {
            try container.encode(suffixData.suffix(suffixLength))
        }
    }
}
